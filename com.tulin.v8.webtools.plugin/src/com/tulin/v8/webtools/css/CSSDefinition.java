package com.tulin.v8.webtools.css;


public class CSSDefinition {
	
	/**
	 * @see http://it028.com/css-font.html
	 * @see @see https://www.w3cschool.cn/css/
	 */
	public static final CSSInfo[] CSS_KEYWORDS = {
			new CSSInfo("text-indent"),
			new CSSInfo("text-align"),
			new CSSInfo("text-decoration"),
			new CSSInfo("text-shadow"),
			new CSSInfo("letter-spacing"),
			new CSSInfo("word-spacing"),
			new CSSInfo("text-transform"),
			new CSSInfo("white-space"),
			new CSSInfo("color"),
			new CSSInfo("background-color"),
			new CSSInfo("background-image"),
			new CSSInfo("background-repeat"),
			new CSSInfo("background-attachment"),
			new CSSInfo("background-position"),
			new CSSInfo("background"),
			new CSSInfo("padding-left"),
			new CSSInfo("padding-right"),
			new CSSInfo("padding-top"),
			new CSSInfo("padding-bottom"),
			new CSSInfo("padding"),
			new CSSInfo("border-left"),
			new CSSInfo("border-right"),
			new CSSInfo("border-top"),
			new CSSInfo("border-bottom"),
			new CSSInfo("border"),
			new CSSInfo("margin-left"),
			new CSSInfo("margin-right"),
			new CSSInfo("margin-top"),
			new CSSInfo("margin-bottom"),
			new CSSInfo("margin"),
			new CSSInfo("font-style"),
			new CSSInfo("font-weight"),
			new CSSInfo("font-variant"),
			new CSSInfo("font-stretch"),
			new CSSInfo("font-size-adjust"),
			new CSSInfo("font-size"),
			new CSSInfo("font-family"),
			new CSSInfo("font"),
			new CSSInfo("border-left-width"),
			new CSSInfo("border-right-width"),
			new CSSInfo("border-top-width"),
			new CSSInfo("border-bottom-width"),
			new CSSInfo("border-left-color"),
			new CSSInfo("border-right-color"),
			new CSSInfo("border-top-color"),
			new CSSInfo("border-bottom-color"),
			new CSSInfo("border-left-style"),
			new CSSInfo("border-right-style"),
			new CSSInfo("border-top-style"),
			new CSSInfo("border-bottom-style"),
			new CSSInfo("display"),
			new CSSInfo("position"),
			new CSSInfo("top"),
			new CSSInfo("bottom"),
			new CSSInfo("left"),
			new CSSInfo("right"),
			new CSSInfo("float"),
			new CSSInfo("clear"),
			new CSSInfo("z-index"),
			new CSSInfo("direction"),
			new CSSInfo("unicode-bidi"),
			new CSSInfo("width"),
			new CSSInfo("min-width"),
			new CSSInfo("max-width"),
			new CSSInfo("height"),
			new CSSInfo("min-height"),
			new CSSInfo("max-height"),
			new CSSInfo("line-height"),
			new CSSInfo("vertical-align"),
			new CSSInfo("overflow"),
			new CSSInfo("clip"),
			new CSSInfo("visibility"),
			new CSSInfo("caption-side"),
			new CSSInfo("table-layout"),
			new CSSInfo("border-collapse"),
			new CSSInfo("border-spacing"),
			new CSSInfo("empty-cells"),
			new CSSInfo("content"),
			new CSSInfo("quotes"),
			new CSSInfo("list-style-type"),
			new CSSInfo("list-style-image"),
			new CSSInfo("list-style-position"),
			new CSSInfo("list-style"),
			new CSSInfo("marker-offset"),
			new CSSInfo("cursor"),
			new CSSInfo("outline-width"),
			new CSSInfo("outline-color"),
			new CSSInfo("outline-style"),
			new CSSInfo("outline"),
			new CSSInfo("a:link"),
			new CSSInfo("a:visited"),
			new CSSInfo("a:hover"),
			new CSSInfo("a:active")
	};
	
	/**
	 * @see http://it028.com/css-font.html
	 * @see https://www.w3cschool.cn/css/
	 */
	public static final CSSValue[] CSS_VALUES = {
			new CSSValue("text-indent:", new String[] {"length","%","inherit"}),
			new CSSValue("text-align:", new String[] {"center","left","right","justify","inherit"}),
			new CSSValue("text-decoration:", new String[] {"none","underline","overline","line-through","blink","inherit"}),
			new CSSValue("text-shadow:", new String[] {"h-shadow","v-shadow","blur","color"}),
			new CSSValue("letter-spacing:", new String[] {"normal","length","inherit"}),
			new CSSValue("word-spacing:", new String[] {"normal","length","inherit"}),
			new CSSValue("text-transform:", new String[] {"none","capitalize","uppercase","lowercase","inherit"}),
			new CSSValue("white-space:", new String[] {"normal","pre","nowrap","pre-wrap","pre-line","inherit"}),
			new CSSValue("color:", new String[] {"red","blue","green","#","rgb(255,0,0)"}),
			new CSSValue("background-color:", new String[] {"red","blue","green","#","rgb(255,0,0)"}),
			new CSSValue("background-image:", new String[] {"url('')"}),
			new CSSValue("background-repeat:", new String[] {"repeat-x","repeat-y","no-repeat"}),
			new CSSValue("background-attachment:", new String[] {"left top"}),
			new CSSValue("background-position:", new String[] {"scroll", "fixed", "local", "initial", "inherit"}),
			new CSSValue("background:", new String[] {"red","blue","green","#","rgb(255,0,0)","url('')"}),
			new CSSValue("padding-left:"),
			new CSSValue("padding-right:"),
			new CSSValue("padding-top:"),
			new CSSValue("padding-bottom:"),
			new CSSValue("padding:"),
			new CSSValue("border-left:"),
			new CSSValue("border-right:"),
			new CSSValue("border-top:"),
			new CSSValue("border-bottom:"),
			new CSSValue("border:"),
			new CSSValue("margin-left:"),
			new CSSValue("margin-right:"),
			new CSSValue("margin-top:"),
			new CSSValue("margin-bottom:"),
			new CSSValue("margin:"),
			new CSSValue("font-style:", new String[] {"normal","italic","oblique","inherit"}),
			new CSSValue("font-weight:", new String[] {"normal","bold","bolder","lighter","inherit"}),
			new CSSValue("font-variant:", new String[] {"normal","small-caps","inherit"}),
			new CSSValue("font-stretch:"),
			new CSSValue("font-size-adjust:"),
			new CSSValue("font-size:", new String[] {" px"," pt"," %","xx-small","x-small","small","medium","large","x-large","xx-large","smaller","larger","inherit"}),
			new CSSValue("font-family:", new String[] {"family-name","generic-family"}),
			new CSSValue("font:", new String[] {"font-style","font-variant","font-weight","font-size/line-height"}),
			new CSSValue("border-left-width:"),
			new CSSValue("border-right-width:"),
			new CSSValue("border-top-width:"),
			new CSSValue("border-bottom-width:"),
			new CSSValue("border-left-color:"),
			new CSSValue("border-right-color:"),
			new CSSValue("border-top-color:"),
			new CSSValue("border-bottom-color:"),
			new CSSValue("border-left-style:"),
			new CSSValue("border-right-style:"),
			new CSSValue("border-top-style:"),
			new CSSValue("border-bottom-style:"),
			new CSSValue("display:"),
			new CSSValue("position:"),
			new CSSValue("top:"),
			new CSSValue("bottom:"),
			new CSSValue("left:"),
			new CSSValue("right:"),
			new CSSValue("float:", new String[] {"left","right","none","inherit"}),
			new CSSValue("clear:", new String[] {"left","right","both","none","inherit"}),
			new CSSValue("z-index:"),
			new CSSValue("direction:", new String[] {"ltr","rtl","inherit"}),
			new CSSValue("unicode-bidi:", new String[] {"normal","embed","bidi-override","initial","inherit"}),
			new CSSValue("width:"),
			new CSSValue("min-width:"),
			new CSSValue("max-width:"),
			new CSSValue("height:"),
			new CSSValue("min-height:"),
			new CSSValue("max-height:"),
			new CSSValue("line-height:", new String[] {"normal","number","length","%","inherit"}),
			new CSSValue("vertical-align:", new String[] {"baseline","sub","super","top","text-top","middle","bottom","text-bottom","length","%","inherit"}),
			new CSSValue("overflow:"),
			new CSSValue("clip:"),
			new CSSValue("visibility:"),
			new CSSValue("caption-side:"),
			new CSSValue("table-layout:"),
			new CSSValue("border-collapse:"),
			new CSSValue("border-spacing:"),
			new CSSValue("empty-cells:"),
			new CSSValue("content:"),
			new CSSValue("quotes:"),
			new CSSValue("list-style-type:"),
			new CSSValue("list-style-image:"),
			new CSSValue("list-style-position:"),
			new CSSValue("list-style:"),
			new CSSValue("marker-offset:"),
			new CSSValue("cursor:"),
			new CSSValue("outline-width:"),
			new CSSValue("outline-color:"),
			new CSSValue("outline-style:"),
			new CSSValue("outline:")
	};
	
//	static {
//		// sort by length
//		Arrays.sort(CSS_KEYWORDS,new Comparator(){
//			public int compare(Object o1, Object o2){
//				CSSInfo info1 = (CSSInfo)o1;
//				CSSInfo info2 = (CSSInfo)o2;
//				if(info1.getReplaceString().length() > info2.getReplaceString().length()){
//					return -1;
//				}
//				if(info1.getReplaceString().length() < info2.getReplaceString().length()){
//					return 1;
//				}
//				return 0;
//			}
//		});
//	}
}
